import {
  defineComponent,
  onMounted,
  onUnmounted,
  ref,
  watch
} from "./chunk-G4DFXOZZ.js";
import "./chunk-S5PVLP5S.js";

// node_modules/mitt/dist/mitt.mjs
function mitt_default(n) {
  return { all: n = n || /* @__PURE__ */ new Map(), on: function(t, e) {
    var i = n.get(t);
    i ? i.push(e) : n.set(t, [e]);
  }, off: function(t, e) {
    var i = n.get(t);
    i && (e ? i.splice(i.indexOf(e) >>> 0, 1) : n.set(t, []));
  }, emit: function(t, e) {
    var i = n.get(t);
    i && i.slice().map(function(n2) {
      n2(e);
    }), (i = n.get("*")) && i.slice().map(function(n2) {
      n2(t, e);
    });
  } };
}

// node_modules/@livechat/widget-core/dist/widget-core.esm.js
function getData(entity) {
  if (entity === "state") {
    return window.LiveChatWidget.get("state");
  }
  if (entity === "chat") {
    return window.LiveChatWidget.get("chat_data");
  }
  if (entity === "customer") {
    return window.LiveChatWidget.get("customer_data");
  }
  return null;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var scriptRef = {
  current: null
};
function createJSApi() {
  var _scriptRef$current;
  var slice = Array.prototype.slice;
  function handle(args) {
    return api._h ? api._h.apply(null, args) : api._q.push(args);
  }
  var api = {
    _q: [],
    _h: null,
    _v: "2.0",
    on: function on() {
      handle(["on", slice.call(arguments)]);
    },
    once: function once() {
      handle(["once", slice.call(arguments)]);
    },
    off: function off() {
      handle(["off", slice.call(arguments)]);
    },
    get: function get() {
      if (!api._h) {
        throw new Error("[LiveChatWidget] You can't use getters before load.");
      }
      return handle(["get", slice.call(arguments)]);
    },
    call: function call() {
      handle(["call", slice.call(arguments)]);
    },
    init: function init() {
      var script = document.createElement("script");
      script.async = true;
      script.type = "text/javascript";
      script.src = "https://cdn.livechatinc.com/tracking.js";
      document.head.appendChild(script);
      scriptRef.current = script;
    }
  };
  (_scriptRef$current = scriptRef.current) === null || _scriptRef$current === void 0 ? void 0 : _scriptRef$current.remove();
  window.LiveChatWidget = window.LiveChatWidget || api;
  return scriptRef;
}
function assignConfiguration(_ref) {
  var license = _ref.license, group = _ref.group, chatBetweenGroups = _ref.chatBetweenGroups, sessionVariables2 = _ref.sessionVariables, customIdentityProvider = _ref.customIdentityProvider;
  window.__lc = window.__lc || {};
  if (typeof license === "string") {
    window.__lc.license = Number(license);
  } else {
    throw new Error("[LiveChatWidget] The license property is required for initialization");
  }
  if (typeof group !== "undefined") {
    window.__lc.group = Number(group);
  }
  if (typeof chatBetweenGroups !== "undefined") {
    window.__lc.chat_between_groups = Boolean(chatBetweenGroups);
  }
  if (sessionVariables2 instanceof Object) {
    window.__lc.params = Object.entries(sessionVariables2).map(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), name = _ref3[0], value = _ref3[1];
      return {
        name,
        value
      };
    });
  }
  if (typeof customIdentityProvider === "function") {
    window.__lc.custom_identity_provider = customIdentityProvider;
  }
}
function assignEventHandlers(method, eventHandlers) {
  if (method === "off" && typeof window.LiveChatWidget === "undefined") {
    return;
  }
  if (typeof eventHandlers.onReady === "function") {
    window.LiveChatWidget[method]("ready", eventHandlers.onReady);
  }
  if (typeof eventHandlers.onAvailabilityChanged === "function") {
    window.LiveChatWidget[method]("availability_changed", eventHandlers.onAvailabilityChanged);
  }
  if (typeof eventHandlers.onVisibilityChanged === "function") {
    window.LiveChatWidget[method]("visibility_changed", eventHandlers.onVisibilityChanged);
  }
  if (typeof eventHandlers.onCustomerStatusChanged === "function") {
    window.LiveChatWidget[method]("customer_status_changed", eventHandlers.onCustomerStatusChanged);
  }
  if (typeof eventHandlers.onNewEvent === "function") {
    window.LiveChatWidget[method]("new_event", eventHandlers.onNewEvent);
  }
  if (typeof eventHandlers.onFormSubmitted === "function") {
    window.LiveChatWidget[method]("form_submitted", eventHandlers.onFormSubmitted);
  }
  if (typeof eventHandlers.onRatingSubmitted === "function") {
    window.LiveChatWidget[method]("rating_submitted", eventHandlers.onRatingSubmitted);
  }
  if (typeof eventHandlers.onGreetingDisplayed === "function") {
    window.LiveChatWidget[method]("greeting_displayed", eventHandlers.onGreetingDisplayed);
  }
  if (typeof eventHandlers.onGreetingHidden === "function") {
    window.LiveChatWidget[method]("greeting_hidden", eventHandlers.onGreetingHidden);
  }
  if (typeof eventHandlers.onRichMessageButtonClicked === "function") {
    window.LiveChatWidget[method]("rich_message_button_clicked", eventHandlers.onRichMessageButtonClicked);
  }
}
function assignCustomerData(customerData) {
  if (typeof customerData.name === "string") {
    window.LiveChatWidget.call("set_customer_name", customerData.name);
  }
  if (typeof customerData.email === "string") {
    window.LiveChatWidget.call("set_customer_email", customerData.email);
  }
}
function assignVisibility(visibility2) {
  if (visibility2 === "hidden") {
    window.LiveChatWidget.call("hide");
  }
  if (visibility2 === "maximized") {
    window.LiveChatWidget.call("maximize");
  }
  if (visibility2 === "minimized") {
    window.LiveChatWidget.call("minimize");
  }
}
var emitter = mitt_default();
var lifecycleEmit = emitter.emit.bind(null);
function lcOnInit(callback) {
  emitter.on("init", callback);
  if ("LiveChatWidget" in window) {
    callback();
  }
  return function() {
    emitter.off("init", callback);
  };
}
function lcOnDestroy(callback) {
  emitter.on("destroy", callback);
  return function() {
    emitter.off("destroy", callback);
  };
}
function createWidget(config) {
  var state = {
    isLoading: false,
    desiredState: "unknown",
    currentEventHandlers: {
      onReady: config.onReady,
      onNewEvent: config.onNewEvent,
      onFormSubmitted: config.onFormSubmitted,
      onGreetingHidden: config.onGreetingHidden,
      onRatingSubmitted: config.onRatingSubmitted,
      onGreetingDisplayed: config.onGreetingDisplayed,
      onVisibilityChanged: config.onVisibilityChanged,
      onAvailabilityChanged: config.onAvailabilityChanged,
      onCustomerStatusChanged: config.onCustomerStatusChanged,
      onRichMessageButtonClicked: config.onRichMessageButtonClicked
    }
  };
  var scriptRef2 = createJSApi();
  assignConfiguration(config);
  assignVisibility(config.visibility);
  assignEventHandlers("on", state.currentEventHandlers);
  assignCustomerData({
    name: config.customerName,
    email: config.customerEmail
  });
  window.__lc.integration_name = "@livechat/widget-core";
  return {
    init: function init() {
      var _this = this;
      state.desiredState = "loaded";
      if (state.isLoading) {
        return;
      }
      window.LC_API = window.LC_API || {};
      window.LC_API.on_after_load = function() {
        state.isLoading = false;
        if (state.desiredState === "destroyed") {
          _this.destroy();
        }
        state.desiredState = "unknown";
      };
      lifecycleEmit("init");
      state.isLoading = true;
      window.LiveChatWidget.init();
    },
    destroy: function destroy() {
      var _scriptRef$current;
      state.desiredState = "destroyed";
      if (state.isLoading) {
        return;
      }
      lifecycleEmit("destroy");
      (_scriptRef$current = scriptRef2.current) === null || _scriptRef$current === void 0 ? void 0 : _scriptRef$current.remove();
      window.LiveChatWidget.call("destroy");
    },
    updateVisibility: function updateVisibility(visibility2) {
      assignVisibility(visibility2);
    },
    updateEventHandlers: function updateEventHandlers(eventHabndlers) {
      assignEventHandlers("off", state.currentEventHandlers);
      assignEventHandlers("on", eventHabndlers);
      state.currentEventHandlers = _objectSpread2({}, eventHabndlers);
    },
    updateSessionVariables: function updateSessionVariables(sessionVariables2) {
      if (sessionVariables2) {
        window.LiveChatWidget.call("update_session_variables", sessionVariables2);
      }
    },
    hideGreeting: function hideGreeting() {
      window.LiveChatWidget.call("hide_greeting");
    },
    updateCustomerData: function updateCustomerData(customerData) {
      assignCustomerData(customerData);
    }
  };
}

// node_modules/@livechat/widget-vue/dist/widget-vue.esm.js
function useWidgetIsReady() {
  var isReady = ref(false);
  var unsubscribeInit = null;
  var unsubscribeDestroy = null;
  var onReady = function onReady2() {
    isReady.value = true;
  };
  onMounted(function() {
    unsubscribeInit = lcOnInit(function() {
      assignEventHandlers("once", {
        onReady
      });
    });
    unsubscribeDestroy = lcOnDestroy(function() {
      isReady.value = false;
    });
  });
  onUnmounted(function() {
    var _unsubscribeInit, _unsubscribeDestroy;
    assignEventHandlers("off", {
      onReady
    });
    (_unsubscribeInit = unsubscribeInit) === null || _unsubscribeInit === void 0 ? void 0 : _unsubscribeInit();
    (_unsubscribeDestroy = unsubscribeDestroy) === null || _unsubscribeDestroy === void 0 ? void 0 : _unsubscribeDestroy();
  });
  return isReady;
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread22(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function useWidgetState() {
  var widgetState = ref(null);
  var unsubscribeInit = null;
  var unsubscribeDestroy = null;
  var onReady = function onReady2(_ref) {
    var state = _ref.state;
    widgetState.value = state;
  };
  var onVisibilityChanged = function onVisibilityChanged2(_ref2) {
    var visibility2 = _ref2.visibility;
    widgetState.value = widgetState.value ? _objectSpread22(_objectSpread22({}, widgetState.value), {}, {
      visibility: visibility2
    }) : widgetState.value;
  };
  var onAvailabilityChanged = function onAvailabilityChanged2(_ref3) {
    var availability = _ref3.availability;
    widgetState.value = widgetState.value ? _objectSpread22(_objectSpread22({}, widgetState.value), {}, {
      availability
    }) : widgetState.value;
  };
  onMounted(function() {
    unsubscribeInit = lcOnInit(function() {
      assignEventHandlers("once", {
        onReady
      });
      assignEventHandlers("on", {
        onVisibilityChanged,
        onAvailabilityChanged
      });
    });
    unsubscribeDestroy = lcOnDestroy(function() {
      widgetState.value = null;
    });
  });
  onUnmounted(function() {
    var _unsubscribeInit, _unsubscribeDestroy;
    assignEventHandlers("off", {
      onReady,
      onVisibilityChanged,
      onAvailabilityChanged
    });
    (_unsubscribeInit = unsubscribeInit) === null || _unsubscribeInit === void 0 ? void 0 : _unsubscribeInit();
    (_unsubscribeDestroy = unsubscribeDestroy) === null || _unsubscribeDestroy === void 0 ? void 0 : _unsubscribeDestroy();
  });
  return widgetState;
}
function useWidgetCustomerData() {
  var customerData = ref(null);
  var unsubscribeInit = null;
  var unsubscribeDestroy = null;
  var onReady = function onReady2(payload) {
    customerData.value = payload.customerData;
  };
  var onCustomerStatusChanged = function onCustomerStatusChanged2() {
    customerData.value = getData("customer");
  };
  onMounted(function() {
    unsubscribeInit = lcOnInit(function() {
      assignEventHandlers("once", {
        onReady
      });
      assignEventHandlers("on", {
        onCustomerStatusChanged
      });
    });
    unsubscribeDestroy = lcOnDestroy(function() {
      customerData.value = null;
    });
  });
  onUnmounted(function() {
    var _unsubscribeInit, _unsubscribeDestroy;
    assignEventHandlers("off", {
      onReady,
      onCustomerStatusChanged
    });
    (_unsubscribeInit = unsubscribeInit) === null || _unsubscribeInit === void 0 ? void 0 : _unsubscribeInit();
    (_unsubscribeDestroy = unsubscribeDestroy) === null || _unsubscribeDestroy === void 0 ? void 0 : _unsubscribeDestroy();
  });
  return customerData;
}
function useWidgetChatData() {
  var chatData = ref(null);
  var customerData = useWidgetCustomerData();
  watch(function() {
    var _customerData$value;
    return (_customerData$value = customerData.value) === null || _customerData$value === void 0 ? void 0 : _customerData$value.status;
  }, function(status) {
    if (status === "chatting") {
      chatData.value = getData("chat");
    } else {
      chatData.value = null;
    }
  });
  return chatData;
}
function useWidgetGreeting() {
  var greeting = ref(null);
  var unsubscribeInit = null;
  var unsubscribeDestroy = null;
  var onGreetingDisplayed = function onGreetingDisplayed2(greetingData) {
    greeting.value = greetingData;
  };
  var onGreetingHidden = function onGreetingHidden2() {
    greeting.value = null;
  };
  onMounted(function() {
    unsubscribeInit = lcOnInit(function() {
      assignEventHandlers("on", {
        onGreetingDisplayed,
        onGreetingHidden
      });
    });
    unsubscribeDestroy = lcOnDestroy(function() {
      greeting.value = null;
    });
  });
  onUnmounted(function() {
    var _unsubscribeInit, _unsubscribeDestroy;
    assignEventHandlers("off", {
      onGreetingDisplayed,
      onGreetingHidden
    });
    (_unsubscribeInit = unsubscribeInit) === null || _unsubscribeInit === void 0 ? void 0 : _unsubscribeInit();
    (_unsubscribeDestroy = unsubscribeDestroy) === null || _unsubscribeDestroy === void 0 ? void 0 : _unsubscribeDestroy();
  });
  return greeting;
}
var LiveChatWidget = defineComponent({
  props: {
    license: {
      type: String,
      required: true
    },
    group: {
      type: String,
      required: false,
      "default": void 0
    },
    visibility: {
      type: String,
      required: false,
      "default": void 0
    },
    customerName: {
      type: String,
      required: false,
      "default": void 0
    },
    customerEmail: {
      type: String,
      required: false,
      "default": void 0
    },
    sessionVariables: {
      type: Object,
      required: false,
      "default": void 0
    },
    chatBetweenGroups: {
      type: Boolean,
      required: false,
      "default": void 0
    },
    customIdentityProvider: {
      type: Function,
      required: false,
      "default": void 0
    }
  },
  emits: ["ready", "new-event", "form-submitted", "rating-submitted", "greeting-hidden", "greeting-displayed", "visibility-changed", "customer-status-changed", "rich-message-button-clicked", "availability-changed"],
  data: function data() {
    return {
      widget: null
    };
  },
  watch: {
    license: "reinitialize",
    group: "reinitialize",
    chatBetweenGroups: "reinitialize",
    visibility: function visibility(_visibility) {
      var _this$widget;
      (_this$widget = this.widget) === null || _this$widget === void 0 ? void 0 : _this$widget.updateVisibility(_visibility);
    },
    customerName: function customerName(name) {
      var _this$widget2;
      (_this$widget2 = this.widget) === null || _this$widget2 === void 0 ? void 0 : _this$widget2.updateCustomerData({
        name
      });
    },
    customerEmail: function customerEmail(email) {
      var _this$widget3;
      (_this$widget3 = this.widget) === null || _this$widget3 === void 0 ? void 0 : _this$widget3.updateCustomerData({
        email
      });
    },
    sessionVariables: function sessionVariables(_sessionVariables) {
      var _this$widget4;
      (_this$widget4 = this.widget) === null || _this$widget4 === void 0 ? void 0 : _this$widget4.updateSessionVariables(_sessionVariables);
    }
  },
  mounted: function mounted() {
    this.setupWidget();
  },
  unmounted: function unmounted() {
    var _this$widget5;
    (_this$widget5 = this.widget) === null || _this$widget5 === void 0 ? void 0 : _this$widget5.destroy();
  },
  methods: {
    setupWidget: function setupWidget() {
      var _this = this;
      this.widget = createWidget({
        group: this.group,
        license: this.license,
        customerName: this.customerName,
        customerEmail: this.customerEmail,
        sessionVariables: this.sessionVariables,
        chatBetweenGroups: this.chatBetweenGroups,
        visibility: this.visibility,
        customIdentityProvider: this.customIdentityProvider,
        onReady: function onReady(data2) {
          return _this.$emit("ready", data2);
        },
        onNewEvent: function onNewEvent(event) {
          return _this.$emit("new-event", event);
        },
        onFormSubmitted: function onFormSubmitted(form) {
          return _this.$emit("form-submitted", form);
        },
        onRatingSubmitted: function onRatingSubmitted(rating) {
          return _this.$emit("rating-submitted", rating);
        },
        onGreetingHidden: function onGreetingHidden(greeting) {
          return _this.$emit("greeting-hidden", greeting);
        },
        onGreetingDisplayed: function onGreetingDisplayed(greeting) {
          return _this.$emit("greeting-displayed", greeting);
        },
        onVisibilityChanged: function onVisibilityChanged(visibility2) {
          return _this.$emit("visibility-changed", visibility2);
        },
        onCustomerStatusChanged: function onCustomerStatusChanged(status) {
          return _this.$emit("customer-status-changed", status);
        },
        onRichMessageButtonClicked: function onRichMessageButtonClicked(button) {
          return _this.$emit("rich-message-button-clicked", button);
        },
        onAvailabilityChanged: function onAvailabilityChanged(availability) {
          return _this.$emit("availability-changed", availability);
        }
      });
      window.__lc.integration_name = "@livechat/widget-vue";
      this.widget.init();
    },
    reinitialize: function reinitialize() {
      var _this$widget6;
      (_this$widget6 = this.widget) === null || _this$widget6 === void 0 ? void 0 : _this$widget6.destroy();
      this.setupWidget();
    }
  },
  render: function render() {
    return null;
  }
});
export {
  LiveChatWidget,
  useWidgetChatData,
  useWidgetCustomerData,
  useWidgetGreeting,
  useWidgetIsReady,
  useWidgetState
};
//# sourceMappingURL=@livechat_widget-vue.js.map
